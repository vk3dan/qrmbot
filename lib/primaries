#!/usr/bin/perl

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

my $firstdate = undef;
my %estimate;

my ($date, $est, $name, $state, $dropped);

my $timeout = 10;
my $url = "https://projects.fivethirtyeight.com/polls/national_polling_average.json";

open(HTTP, '-|', "curl -4 --max-time $timeout -L -k -s '$url'");
binmode(HTTP, ":utf8");
while(<HTTP>) {
  my ($k, $v);
  if (/^\s*"(\w+)": "?(.*?)"?,?\s*$/) {
    ($k, $v) = ($1, $2);
  }
  $name = $v if $k eq "candidate";
  $date = $v if $k eq "date";
  $est = $v if $k eq "pct_estimate";
  $state = $v if $k eq "state";
  $dropped = 1 if $k eq "dropped_out" and $v eq "true";
  if (/},/) {
    $firstdate = $date if not defined $firstdate and defined $date;
    goto DONE if $date ne $firstdate;
    goto DONE if not defined $name or not defined $est;
    goto DONE if not defined $state or $state ne "National";
    goto DONE if defined $dropped and $dropped == 1;
    $estimate{$name} = $est;
    #print "$name $est\n";

    DONE:
    ($date, $est, $name, $state, $dropped) = (undef, undef, undef, undef, undef);
  }
}
close(HTTP);

if (scalar keys %estimate == 0) {
  print "error: no data\n";
  exit 0;
}

print "National polls as of $firstdate: ";

# descending sort by value
my $i = 0;
foreach my $name (sort { $estimate{$b} <=> $estimate{$a} } keys %estimate) {
  my $str = sprintf "%s %0.1f%%", $name, $estimate{$name};
  print bold($str) if $i == 0;
  print $str if $i != 0;
  $i++;
  print " -- " if $i != scalar keys %estimate;
}
print "\n";
