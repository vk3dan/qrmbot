#!/usr/bin/perl -w
# WUnderground API client -- current conditions.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

# requires an API key from wunderground.com  Place into the file $HOME/.wunderground as follows:
#
# $apikey = "0123456789abcdef";

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");
use Encode qw(decode);
use I18N::Langinfo qw(langinfo CODESET);
use URI::Escape;
use Math::Round;
use POSIX qw(strftime);
use POSIX qw(tzset);
use Time::Piece ();

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

our $apikey = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

my $apikeyfile = $ENV{'HOME'} . "/.wunderground";
if (-e ($apikeyfile)) {
  require($apikeyfile);
} else {
  die "error: unable to read file $apikeyfile"
}
die "error: no API key set" unless defined($apikey);

my $full = 0;
my $i = 0;
my $loc;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--full/) {
    $full = 1;
    $i++;
    next;
  }
  if (defined($loc)) {
    $loc = $loc . " " . $ARGV[$i];
  } else {
    $loc = $ARGV[$i];
  }
  $i++;
}

$full = 1 if $username ne 'eggdrop';

# decode command line from locale-specified codeset
my $codeset = langinfo(CODESET);
$loc = decode($codeset, $loc);

if (defined($loc)) {
  $loc =~ s/^\s*//;
  $loc =~ s/\s*$//;
}

if (!defined($loc) or length($loc) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !wx <location>\n";
  } else {
    print "usage: $0 <location>\n";
  }
  exit $exitnonzeroonerror;
}

if (not $loc =~ m/^PWS:/i) {
  my $geo = argToCoords($loc);
  $loc = $geo if defined $geo;
}

#print "loc: $loc\n";
my $encodedloc = uri_escape($loc);

my $url = "http://api.wunderground.com/api/$apikey/conditions/q/$encodedloc.json";

#print "$url\n";

my $in_disp_loc = 0;
my $in_obs_loc = 0;
my $error = 0;
my %rec;
my $rec_ref;

my $multiple = 0;
my @results;	  # array of hash references
my $count = 0;

#print "$url\n";
open(HTTP, '-|', "curl -s -L --compressed --insecure '$url'");
binmode(HTTP, ":utf8");
while (<HTTP>) {
  #print;
  chomp;
  if (/"results"/) {
    #print "bzzzt: $loc\n";
    $multiple = 1;
    #exit $exitnonzeroonerror;
  }

  if ($multiple == 1 and /{/) {
    $rec_ref = {};
    #push(@results, $rec_ref);
    #delete %rec = undef;
    $count++;
  }
  if ($multiple == 1 and /}/ and $count > 0) {
    push(@results, $rec_ref);
    $count--;
    #%rec = undef;
  }

  if (/"error"/) {
    $error = 1;
  }
  if ($error == 1 && /"(description|type)"/) {
    /"(\w+)":\s*"([^"]*)"/;
    print "error: $2\n";
    exit $exitnonzeroonerror;
  }

  if (/"display_location"/) {
    $in_disp_loc = 1;
    $in_obs_loc = 0;
  }
  if (/"observation_location"/) {
    $in_disp_loc = 0;
    $in_obs_loc = 1;
  }
  if (/"estimated":/) {
    $in_disp_loc = 0;
    $in_obs_loc = 0;
  }

  if (/"(\w+)":\s*(-?\d+|"[^"]*")/) {
    my $key = $1;
    my $val = $2;
    $val =~ s/^"(.*)"$/$1/;
    if ($in_disp_loc == 1) {
      $key = "disp_$key";
    } elsif ($in_obs_loc == 1) {
      $key = "obs_$key";
    }
    #print "$key = $val\n";

    $rec{"$key"} = $val unless $val eq "NA" or $val eq "--";
    ${$rec_ref}{"$key"} = $val unless $val eq "NA" or $val eq "--";
  }

}
close(HTTP);

if ($multiple == 1) {
#  print "do something.\n";
  print "multiple results: ";
  my $i = 0;
  while (@results and %rec = %{shift @results}) {
    #print $i++ . "\n";
    if ($rec{'name'} ne $rec{'city'}) {
      print "$rec{'name'}, ";
    }
    print "$rec{'city'}, ";
    print "$rec{'state'}, " if (defined $rec{'state'} and length $rec{'state'} > 0);
    print ($rec{'country_name'} || $rec{'country'});
    print "; ";
  }
  print "\n";
  exit $exitnonzeroonerror;
}

if (not defined $rec{'temp_c'} and not defined $rec{'temp_f'}) {
  # didn't get valid data
  print "error encountered: no data\n";
  exit $exitnonzeroonerror;
}

my $lat = nearest(.1, $rec{'disp_latitude'});
my $lon = nearest(.1, $rec{'disp_longitude'});
my $elev = undef;
$elev = nearest(1, $rec{'disp_elevation'}) if defined $rec{'disp_elevation'} and length($rec{'disp_elevation'}) > 0;
my $pressure_trend = $rec{'pressure_trend'};
if (defined($pressure_trend)) {
  $pressure_trend =~ s/\+/↑/;
  $pressure_trend =~ s/-/↓/;
  $pressure_trend =~ s/0/·/;
}

# unicode weather chars
#       sun: ☀☼🌞🌣⛱
#     cloud: ☁
#    partly: ⛅🌤🌥
#  umbrella: ☂🌂
#   snowman: ☃⛄⛇
#      snow: ❄❅❆
#      rain: ☔⛆⛆🌢🌦🌧🌨⛈⛆🌢🌧
#      moon: ☾☽🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝
# lightning: ⚡⛈☇☈🌩
#   cyclone: 🌀
#       fog: 🌁▒🌫
#   tornado: 🌪
#      wind: 🌬
#   rainbow: 🌈
#


$elev = "${elev}m/" . nearest(1, $elev * 3.2808399) . "ft" if defined($elev);

print "Weather for ", bold($rec{'disp_full'});

#full
print " ($lat,$lon) " if $full == 1;
print " Elev: $elev\n" if $full == 1 and defined($elev);
if (defined($rec{'estimated'}) and $rec{'estimated'} == 1) {
  print " *estimated ";
  print "conditions only\n" if ($full == 1);
} else {
  print " observed at $rec{'station_id'}, $rec{'obs_city'}, $rec{'observation_time'}\n" if ($full == 1);
}

#short
print " conditions: ", bold($rec{'weather'}), "  Temp: ", bold("$rec{'temp_c'}°C/$rec{'temp_f'}°F"), "  Humidity: $rec{'relative_humidity'}";
print " " if ($full == 0);

# feelslike for full, or if sufficiently different for short
if ($full == 1 or (abs($rec{'temp_c'} - $rec{'feelslike_c'}) >= 4)) {
  print "\n" if $full == 1;
  print " Feels like: $rec{'feelslike_c'}°C/$rec{'feelslike_f'}°F ";
}

#full
if ($full == 1) {
  print " Visibility: $rec{'visibility_km'}km/$rec{'visibility_mi'}mi\n" unless $rec{'visibility_km'} eq "" or $rec{'visibility_km'} eq "N/A";
}

if ($rec{'wind_mph'} == -9999) {
  print " Wind: no data ";
} else {
  #short
  my $wind;
  if ($rec{'wind_mph'} == 0) {
    $wind = "calm";
  } else {
    #$wind = "at $rec{'wind_mph'}mph/$rec{'wind_kph'}kph";
    $wind = "at $rec{'wind_kph'}kph/$rec{'wind_mph'}mph";
  }
  print " Wind: $rec{'wind_dir'} $wind ";

  print "(gust $rec{'wind_gust_kph'}kph/$rec{'wind_gust_mph'}mph) " unless $rec{'wind_gust_mph'} == 0 or $rec{'wind_gust_mph'} eq "NA";
}

#full
print " Pressure: $rec{'pressure_mb'}mb/$rec{'pressure_in'}inHg ($pressure_trend)" if ($full == 1 and $rec{'pressure_in'} ne "");

if ($full == 1 and
    (($rec{'precip_1hr_in'} ne "0.00" and
		    $rec{'precip_1hr_in'} ne "-999.00" and
		    $rec{'precip_1hr_in'} ne "-9999.00")
    or
      ($rec{'precip_today_in'} ne "" and
	      $rec{'precip_today_in'} ne "0.00" and
	      $rec{'precip_today_in'} ne "-999.00" and
	      $rec{'precip_today_in'} ne "-9999.00"))) {
  print "\n";
  print " Precipitation:";
  print " last hour: $rec{'precip_1hr_metric'}mm/$rec{'precip_1hr_in'}in"
  	if ($rec{'precip_1hr_in'} ne "0.00" and
		$rec{'precip_1hr_in'} ne "-999.00" and
		$rec{'precip_1hr_in'} ne "-9999.00");
  print " today: $rec{'precip_today_metric'}mm/$rec{'precip_today_in'}in"
  	if ($rec{'precip_today_in'} ne "" and
		$rec{'precip_today_in'} ne "0.00" and
		$rec{'precip_today_in'} ne "-999.00" and
		$rec{'precip_today_in'} ne "-9999.00");
}

#end
print "\n" if $full == 1;


my $inalerts = 0;

my $description = undef;
my $end = 0;
my $zone = undef;
my $europe = 0;

$url = "http://api.wunderground.com/api/$apikey/alerts/q/$encodedloc.json";
#print "$url\n";
open(HTTP, '-|', "curl -s -L --compressed --insecure '$url'");
binmode(HTTP, ":utf8");
while (<HTTP>) {
  chomp;

  if (/"alerts": \[/) {
    $inalerts = 1;
  }

  if (/"(\w+)":\s*(-?\d+|"[^"]*")/) {
    my $key = $1;
    my $val = $2;
    $val =~ s/^"(.*)"$/$1/;
    #print "$key = $val\n";

    if (/meteoalarm/) {
      $europe = 1;
    }

    if ($inalerts == 1 && $key eq "description" && $europe == 0) {
      $description = $val;
    }
    if ($inalerts == 1 && $key eq "expires_epoch" && $europe == 0) {
      $end = $val;
    }
    if ($inalerts == 1 && $key eq "tz_long" && $europe == 0) {
      $zone = $val;
    }

    if ($inalerts == 1 && $europe == 1 && $key eq "wtype_meteoalarm_name") {
      $description = $val;
    }
    if ($inalerts == 1 && $europe == 1 && $key eq "level_meteoalarm_name") {
      $description = "$description ($val)";
    }
    if ($inalerts == 1 && $europe == 1 && $key eq "expires") {
      $end = Time::Piece->strptime($val, "%Y-%m-%d %H:%M:%S %Z")->epoch;
      $zone = $rec{local_tz_long}; # from conditions query
    }
  }

  if (defined($description) && /}$/) {
    $zone = "UTC" if !defined($zone);
    $ENV{'TZ'} = $zone;
    tzset;
    $end = strftime("%a %H:%M %Z", localtime($end)); # e.g. Sun 11:00 PDT

    my $alertmsg = bold("Alert");
    $alertmsg = yellow("Alert") if $description =~ /yellow/i;
    $alertmsg = darkYellow("Alert") if $description =~ /orange/i;
    $alertmsg = red("Alert") if $description =~ /red/i;
    $alertmsg = darkRed("Alert") if $description =~ /(dark ?red|dunkelrot)/i;
    print " ${alertmsg}: ", bold(${description}), " until $end";
    print "\n" if $full == 1;
    print " " if $full == 0;

    $description = $zone = undef;
    $end = 0;
  }
}
close HTTP;

print "\n" if $full == 0;

exit 0;
