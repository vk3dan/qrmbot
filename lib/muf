#!/usr/bin/perl -w
# Lookup MUF by station.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use Time::Piece ();

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;
use Util;

my $timeout = 20;	# 20 seconds

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
if ($#ARGV < 0 || length($ARGV[0]) == 0) {

  if ($username eq 'eggdrop') {
    print "usage: !muf <station>  --or--  !muf list (use /msg)\n";
  } else {
    print "usage: $0 <station>  --or--  $0 list\n";
  }
  exit 0
}

my $stationUrl = "https://lgdc.uml.edu/common/DIDBFastStationList";

my $place = join(' ', @ARGV);
$place=~tr/ /_/;
$place=~s/[^A-Za-z_]//g;
$place=~s/_([a-z])/_\U$1\E/g;
$place=~s/^([a-z])/\U$1\E/;

#print "place: $place\n";

my $ursiCode = undef;
my $station;
my $list = "";

my %stationCodes = (
  "Ahmedabad" => "AH223",
  "Alpena" => "AL945",
  "Anyang" => "AN438",
  "Ascension_Island" => "AS00Q",
  "Athens" => "AT138",
  "Austin" => "AU930",
  "Beijing" => "BP440",
  "Belem" => "BLJ03",
  "Bermuda" => "BJJ32",
  "Boa_Vista" => "BVJ03",
  "Boulder" => "BC840",
  "Brisbane" => "BR52P",
  "Bundoora" => "BV53Q",
  "Cachimbo" => "CXM9B",
  "Cachoeira_Paulista" => "CAJ2M",
  "Camden" => "CN53L",
  "Campo_Grande" => "CGK21",
  "Canberra" => "CB53N",
  "Cherry" => "CH833",
  "Chilton" => "RL052",
  "Cocos_Island" => "CS31K",
  "College_Ak" => "CO764",
  "Colorado_Springs" => "CS839",
  "Darwin" => "DW41K",
  "Dourbes" => "DB049",
  "Dyess_Afb" => "DS932",
  "Eglin_Afb" => "EG931",
  "Eielson" => "EI764",
  "El_Arenosillo" => "EA036",
  "Fairford" => "FF051",
  "Fortaleza" => "FZA0M",
  "Gadanki" => "GA313",
  "Gakona" => "GA762",
  "Gibilmanna" => "GM037",
  "Goose_Bay" => "GSJ53",
  "Grahamstown" => "GR13L",
  "Guam" => "GU513",
  "Hainan" => "HA419",
  "Hanscom_Afb" => "HAJ43",
  "Hermanus" => "HE13N",
  "Hobart" => "HO54K",
  "Icheon" => "IC437",
  "Idaho_National_Lab" => "AC843",
  "Idaho_National_Lab" => "IF843",
  "Ilorin" => "IL008",
  "Irkutsk" => "IR352",
  "Jeju" => "JJ433",
  "Jicamarca" => "JI91J",
  "Juliusruh" => "JR055",
  "King_Salmon" => "KS759",
  "Kirtland" => "KR835",
  "Kokubunji" => "TO535",
  "Kwajalein" => "KJ609",
  "Laverton" => "LA42Q",
  "Learmonth" => "LM42B",
  "Louisvale" => "LV12P",
  "Lualualei" => "LL721",
  "Madimbo" => "MU12K",
  "Melrose" => "ME929",
  "Millstone_Hill" => "MHJ45",
  "Mohe" => "MH453",
  "Moscow" => "MO155",
  "Multan" => "MU230",
  "Munyo" => "MU834",
  "Narssarssuaq" => "NQJ61",
  "Nicosia" => "NI135",
  "Niue" => "ND61R",
  "Nord_Greenland" => "NDA81",
  "Norilsk" => "NO369",
  "Okinawa" => "OK426",
  "Olsztyn" => "OL246",
  "Osan_Ab" => "SN437",
  "Perth" => "PE43K",
  "Port_Stanley" => "PSJ5J",
  "Pruhonice" => "PQ052",
  "Pt_Arguello" => "PA836",
  "Qaanaaq" => "THJ77",
  "Ramey" => "PRJ18",
  "Rome" => "RM041",
  "Rome" => "RO041",
  "Roquetes" => "EB040",
  "San_Vito" => "VT139",
  "Santa_Maria" => "SMK29",
  "Sanya" => "SA418",
  "Saoluis" => "SAA0K",
  "Sondrestrom" => "SMJ67",
  "Squirt" => "SQ832",
  "Townsville" => "TV51R",
  "Trivandrum" => "TM308",
  "Tromso" => "TR169",
  "Tucuman" => "TUJ2O",
  "Tucuman_Aisingv" => "TNJ20",
  "Wallops_Is" => "WP937",
  "Warsaw" => "MZ152",
  "Wuhan" => "WU430",
  "Xinxiang_China" => "XI434",
  "Yakutsk" => "YA462",
  "Zhigansk" => "ZH466",
  "Zhong_Shan" => "ZS36R",
);

$ursiCode = $stationCodes{$place};

if (!defined $ursiCode and not $place eq "list") {
  foreach my $e ( keys %stationCodes ) {
    if (lc($place) eq lc($e) or $e =~ /^$place/) {
      $ursiCode = $stationCodes{$e};
    }
  }
}

if (!defined $ursiCode or $place eq "list") {

  open (STATIONS, '-|', "curl -s -k -L --max-time $timeout --retry 1 \"${stationUrl}\"");
  while (<STATIONS>) {
    if (/^<td.*">([A-Z0-9]+)<\/a><\/big>.*?<big>([^<]*)<\/big>/) {
      my $code = $1;
      $station = $2;
      $station=~tr/ /_/;
      $station=~s/[^A-Za-z_]//g;
      $station=lc $station;
      $station=~s/_([a-z])/_\U$1\E/g;
      $station=~s/^([a-z])/\U$1\E/;
      #print "$code $station\n";

      my $limit = 65;
      $limit = 400 if $username eq "eggdrop";
      if (lc($place) eq "list") {
	if (length $list > $limit) {
	  print "$list\n";
	  $list = "";
	}
	$list = $list . "$station ";
      }

      if (lc($place) eq lc($station) or $station =~ /^$place/) {
	#print "$code $station\n";
	$ursiCode = $code;
      }
    }
  }
  close STATIONS;

  my $stationMap = "Map: http://giro.uml.edu/img/giro-map.gif";

  if (lc($place) eq "list") {
    print "$list-- $stationMap\n" if $username eq "eggdrop";
    print "$list\n$stationMap\n" if $username ne "eggdrop";
    exit 0;
  }

  print "Station not found: $place\n" if !defined($ursiCode);
  exit 0 if !defined($ursiCode);
}

my $dataUrl = "https://lgdc.uml.edu/common/DIDBGetValues?ursiCode=${ursiCode}&charName=MUFD&DMUF=3000";
my ($grid, $lat, $lon, $utc, $cs, $mufd, $minmuf, $maxmuf, $mintime, $maxtime, $name);
my ($last, $ts, $sec, $min, $hour, $day, $mon, $year);

$maxmuf = -999.0;
$minmuf = 999.0;
$last = 0;

my %mufrecords;

#print "$dataUrl\n";
open (DATA, '-|', "curl -s -k -L --max-time $timeout --retry 1 \"${dataUrl}\"");
while (<DATA>) {
  if (/Location: GEO (-?[0-9.]+)([NS]) (-?[0-9.]+)([EW]), URSI-Code (\w+) (.*?)\s*$/) {
    $lat = $1;
    $lon = $3;
    $lat *= -1 if $2 eq "S";
    $lon *= -1 if $4 eq "W";
    $lon = $lon - 360 if $4 eq "E" and $lon > 180;
    $station = $6;
    $grid = substr(coordToGrid($lat, $lon), 0, 4);
  }

  if (/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).\d{3}Z\s+(\d+)\s+(.*?)\s+\/\/\s*$/) {
    ($year,$mon,$day,$hour,$min,$sec,$cs,$mufd)=($1,$2,$3,$4,$5,$6,$7,$8);
    $ts = Time::Piece->strptime("$year-$mon-$day $hour:$min:$sec", "%Y-%m-%d %H:%M:%S")->epoch;
    #$ts = Time::Piece->strptime($_, "%Y-%m-%dT%H:%M:%S")->epoch; # garbage at end

    # CS is Confidence Score
    if ($cs > 0 and isNumeric($mufd)) {
      $mufrecords{$ts} = $mufd;
      $last = $ts if $ts > $last;

      $maxtime = "${hour}${min}z" if $mufd > $maxmuf;
      $maxmuf = $mufd if $mufd > $maxmuf;

      $mintime = "${hour}${min}z" if $mufd < $minmuf;
      $minmuf = $mufd if $mufd < $minmuf;
    }
  }
}
close(DATA);

if ($last > 0) {
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime($last);
  $year += 1900;
  $mon++;
  my $datetime = sprintf("%4u-%02u-%02u %02u%02uz", $year, $mon, $mday, $hour, $min);
  my $old = "";
  $old = yellow(" [old]") if $last < (time() - (30*60));  # 30 min
  $old = red(" [old]") if $last < (time() - (120*60));    # 2 hour
  print bold($station), " ($grid): MUF @ $datetime$old: ",
	bold("$mufrecords{$last} MHz"),
	"; recent high: $maxmuf at $maxtime; low $minmuf at $mintime\n";
} else {
  print "no records found for $ursiCode\n";
}

exit 0;

