#!/usr/bin/perl -w
#
# Lookup DXCC for given call or prefix.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;

use File::Temp qw(tempfile);

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

# Retrieve from here: http://www.country-files.com/big-cty/
my $ctydat=$ENV{'HOME'} . "/.cty.dat";

# load mostwanted summary from $HOME/.mostwanted.txt, which will be populated
# by the scrapeMW() subroutine.
my $mostwantedfile=$ENV{'HOME'} . "/.mostwanted.txt";

my $maxage=604800; # 1 week

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

## end config options

my @lastentity = undef;
my @records;

if ($#ARGV < 0 || length($ARGV[0]) == 0) {

  if ($username eq 'eggdrop') {
    print "usage: !dxcc <callsign>|<prefix>|<name>\n";
  } else {
    print "usage: $0 <callsign>|<prefix>|<name>\n";
  }
  exit $exitnonzeroonerror;
}

my $term = uc $ARGV[0];
$term =~ s/^\s*//;
$term =~ s/\s*$//;

my $now = time;
my $needCTY = 0;
if ( ! -e $ctydat ) {
  $needCTY = 1;
} else {
  my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $mostwantedfile;
  if (defined $mtime) {
    my $age = $now - $mtime;
    if ($age > $maxage or $size == 0) {
      $needCTY = 1;
    }
  } else {
    $needCTY = 1;
  }
}

updateCTY() if ($needCTY == 1);


my %dxccmap;

open(CTYDAT, "<", $ctydat) or die "unable to find cty.dat file: $ctydat ";
while (<CTYDAT>) {
  chomp;
  s/\x0D$//; #CRLF terminators

  if (/^[a-z]/i) {
    # entity
    my @entity = split(/:\s*/);

    if ($entity[7] =~ /^\*/) {
      $entity[7] =~ s/^\*//;
      $entity[0] .= " (not DXCC)";
    }

    #print "$entity[7]: $entity[0]\n";
    @lastentity = @entity;

  } elsif (/^\s/) {
    # prefixes/calls
    die "cty.dat formatting error" unless @lastentity;

    s/^\s+//;
    s/;\s*$//;
    my @prefixes = split(/,/);

    for (@prefixes) {
      my $length;
      my $prefix;
      my $pattern;
      my ($itu, $cq, $dxcc, $name, $cont, $lat, $lon, $tz);

      if (/\[(\d+)\]/) {
	$itu = $1;
      } else {
	$itu = $lastentity[2];
	$itu =~ s/^0*//;
      }
      if (/\((\d+)\)/) {
	$cq = $1;
      } else {
	$cq = $lastentity[1];
	$cq =~ s/^0*//;
      }

      $prefix = $_;
      $prefix =~ s/=?([^\(\[]*)(\(\d+\))?(\[\d+\])?/$1/;
      $length = length $prefix;

      if (/^=/) {
	$pattern = "^$prefix\$";
      } else {
	$pattern = "^$prefix";
      }

      $dxcc = $lastentity[7];
      $name = $lastentity[0];
      $cont = $lastentity[3];
      $lat = $lastentity[4];
      $lon = $lastentity[5];
      $tz = -1 * $lastentity[6];  # sign is reversed

      $dxccmap{uc $dxcc} = join('|', $length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz);
      push @records, join('|', $length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz);
      #print "$prefix: $dxcc $cq $itu $pattern $length\n";
    }

  } else {
    print "unexpected input: $_\n";
  }
}
close(CTYDAT);


my $needMW = 0;
if ( ! -e $mostwantedfile ) {
  $needMW = 1;
} else {
  my $now = time;
  my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $mostwantedfile;
  if (defined $mtime) {
    my $age = $now - $mtime;
    if ($age > $maxage or $size == 0) {
      $needMW = 1;
    }
  } else {
    $needMW = 1;
  }
}
scrapeMW() if ($needMW == 1);


# Sort descending by length of matching prefix/callsign.
# So we try by the most specific match first.
@records = sort { (split /\|/,$b)[0] <=> (split /\|/,$a)[0] } @records;

# load mostwanted summary from $HOME/.mostwanted.txt, if present
my %mostwantedByPrefix;
my %mostwantedByName;
open(MW, "<", $mostwantedfile) or goto SKIPMW;
while (<MW>) {
  chomp;
  if (/^\d/) {
    my ($rank, $prefix, $name) = split /,/;
    #print "$prefix => $rank\n";
    $mostwantedByPrefix{$prefix} = $rank;
    $mostwantedByName{$name} = $rank;

    # hack. this place is called 'San Andres & Providencia' in cty.dat, but
    # 'SAN ANDRES ISLAND' by clublog and LoTW.
    if ($name eq "SAN ANDRES ISLAND") {
      $mostwantedByName{"SAN ANDRES & PROVIDENCIA"} = $rank;
    }
    # hack. this place is 3B6 in cty.dat but 3B7 in clublog.
    if ($name eq "AGALEGA & ST BRANDON ISLANDS") {
      $mostwantedByPrefix{"3B6"} = $rank;
      $mostwantedByName{"AGALEGA & ST. BRANDON"} = $rank;
    }

  }
}
close(MW);
SKIPMW:

# for debug
#foreach my $rec (@records) {
#  #print "$prefix\n";
#  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;
#
#  my $mw = $mostwantedByPrefix{uc($dxcc)} || $mostwantedByName{uc($name)};
#  if (!defined($mw)) {
#    #print "missing MW: $name: $dxcc\n" unless $name =~ /not DXCC/;
#  }
#}

# check if exact prefix found
if (defined $dxccmap{$term}) {
  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$dxccmap{$term};

  print bold($term), ": ", bold($name);
  print ": $cont CQ:$cq ITU:$itu";
  my $mw = $mostwantedByPrefix{uc($dxcc)} || $mostwantedByName{uc($name)};
  print " MW:" . $mw unless (!defined $mw);
  print "\n";
  exit 0;
}

# check if an entity is found by name -- needs to be at least 3 chars
if (length($term) >= 3) {
  my $matchterm = quotemeta($term);

  foreach my $rec (@records) {
    my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;

    if ($name =~ m/$matchterm/i) {
      print bold($dxcc), ": ", bold($name);
      print ": $cont CQ:$cq ITU:$itu";
      my $mw = $mostwantedByPrefix{uc($dxcc)} || $mostwantedByName{uc($name)};
      print " MW:" . $mw unless (!defined $mw);
      print "\n";
      exit 0;
    }
  }
}

# If there is a space in the term, it is a name and should have matched the
# above. Error out.

if ($term =~ m/ /) {
  print "Name not found: $term\n";
  exit $exitnonzeroonerror;
}

foreach my $rec (@records) {
  #print "$prefix\n";
  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;

  if ($term =~ m/$pattern/) {
    #print "FOUND: $pattern\n";
    #print "$rec\n";

    my $match = $term;
    $match =~ s/$pattern/bold($&)/e;

    print "$match: " . bold($name);
    print " ($dxcc)" unless $term eq $dxcc;
    print ": $cont CQ:$cq ITU:$itu";
    my $mw = $mostwantedByPrefix{uc($dxcc)} || $mostwantedByName{uc($name)};
    print " MW:" . $mw unless (!defined $mw);
    print "\n";
    exit 0;
  }

}

print "$term: no match\n";
exit $exitnonzeroonerror;


sub scrapeMW {
  my $mwurl = "https://secure.clublog.org/mostwanted.php";

  open(MWFILE, ">", $mostwantedfile) or die "Can't open for writing: $!";

  #print "$mwurl\n";
  open (HTTP, '-|', "curl -s -k --max-time 4 --retry 1 '$mwurl'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    chomp;
    if ( /<p><table>/ ) {
      my @rows = split /<tr>/i;
      foreach my $row (@rows) {
	#print "$row\n";
	if ($row =~ /<td>([0-9]+)\.<\/td><td>([^<]+)<\/td><td><a href='mostwanted2.php\?dxcc=[0-9]+'>([^<]+)<\/a>.*?<\/tr>/i) {
	  my ($rank, $prefix, $name) = ($1, $2, $3);
	  print MWFILE "$rank,$prefix,$name\n";
	}
      }

    }
  }
  close(HTTP);
  close(MWFILE);
}

sub updateCTY {
  my $rssURL = "http://www.country-files.com/category/big-cty/feed/";
  my $done = 0;
  my $inItem = 0;
  my $updateUrl = undef;

  #print "$rssURL\n";
  open (RSS, '-|', "curl -s -k --max-time 4 --retry 1 '$rssURL'");
  binmode(RSS, ":utf8");
  while(<RSS>) {
    chomp;
    next if $done == 1;
    $inItem = 1 if /<item>/;
    if ($inItem == 1 and /<link>(.*)<\/link>/) {
      $updateUrl = $1;
      $done = 1;
    }
  }
  close(RSS);
  print "warning: unable to retrieve cty.dat feed" if !defined $updateUrl;

  my $zipurl = undef;
  $done = 0;
  if (defined $updateUrl) {
    #print "$updateUrl\n";
    open (UPD, '-|', "curl -s -k --max-time 4 --retry 1 '$updateUrl'");
    binmode (UPD, ":utf8");
    while (<UPD>) {
      chomp;
      if ($done == 0 and /(https?:\/\/www\.country-files\.com\/bigcty\/download\/.*\.zip)/) {
	#print "$1\n";
	$zipurl = $1;
	$done = 1;
      }
    }
    close(UPD);
    #http://www.country-files.com/bigcty/download/bigcty-20180123.zip
  }

  if (defined $zipurl) {
    #print "$zipurl\n";
    my (undef, $tmpfile) = tempfile();
    system "curl -s -k -o $tmpfile '$zipurl'";
    system "unzip -p $tmpfile cty.dat > $ctydat";
    unlink $tmpfile
  } else {
    die "unable to retrieve cty.dat";
  }
}

