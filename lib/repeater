#!/usr/bin/perl -w
# Lookup a repeater on repeaterbook.com.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use URI::Escape;

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !repeater [--world] <search terms> [band]\n";
  } else {
    print "usage: $0 [--world] <search terms> [band]\n";
  }
  exit 0;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $world = 0;
my $searchterm = undef;
my $band = undef;

my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--world/) {
    $world = 1;
    $i++;
    next;
  }
  if ($ARGV[$i] =~ /^((10|6|4|2|1\.25)m)|((70|33|23)cm)$/) {
    $band = $ARGV[$i];
    $i++;
    next;
  }
  if (defined $searchterm) {
    $searchterm .= " " . $ARGV[$i];
  } else {
    $searchterm = $ARGV[$i];
  }
  $i++;
}

my $encoded = uri_escape($searchterm);
my $url = "https://repeaterbook.com/repeaters/keyword.php?func=result&keyword=${encoded}&state_id=0";
#print "$url\n";

my $infreq = 0;
my $inloc = 0;
my $instate = 0;
my $incounty = 0;
my $incall = 0;

if (defined($band) and !($band =~ /^((10|6|4|2|1\.25)m)|((70|33|23)cm)$/)) {
  print "valid bands: 10m 6m 4m 2m 1.25m 70cm 33cm 23cm\n";
  exit 0;
}

my $minfreq = 0;
my $maxfreq = 5000;
if (defined($band)) {
  if ($band eq "10m") {
    $minfreq=28;
    $maxfreq=30;
  } elsif ($band eq "6m") {
    $minfreq=50;
    $maxfreq=55;
  } elsif ($band eq "4m") {
    $minfreq=70;
    $maxfreq=72;
  } elsif ($band eq "2m") {
    $minfreq=144;
    $maxfreq=148;
  } elsif ($band eq "1.25m") {
    $minfreq=220;
    $maxfreq=225;
  } elsif ($band eq "70cm") {
    $minfreq=432;
    $maxfreq=450;
  } elsif ($band eq "33cm") {
    $minfreq=902;
    $maxfreq=935;   # ??
  } elsif ($band eq "23cm") {
    $minfreq=1200;  # ??
    $maxfreq=1350;  # ??
  }
}
#print "min: $minfreq, max: $maxfreq\n";

my %vals;

my ($freq, $offset, $squelch, $location, $state, $county, $callsign);

goto WORLD if $world == 1;

#print "$url\n";
open (HTTP, '-|', "curl --max-time 5 --retry 1 --insecure -L -s '$url'");
binmode(HTTP, ":encoding(cp1252)");
while (<HTTP>) {
	#print;
  if (/error/) {
	  s/<\/?b>//g;
	  s/<\/?\s*br\s*\/?>//g;
	  print;
	  exit 1;
  }

  chomp;

  if (/<!-- freq -->/) {
    $infreq = 1;
  }
  if ($infreq == 1 && />([0-9.]+)([-+xs])/) {
    $freq = $1;
    $offset = $2;
  }
  #print "$_\n" if $infreq == 1;
  if ($infreq == 1 && /^(.*)<\/td>/) {
    $squelch = $1;
  }

  if (/<!-- Location -->/) {
    $infreq = 0;
    $inloc = 1;
    #print "inloc\n";
  }
  if ($inloc == 1 && /.*>([^<]*)</) {
    $location = $1;
  }

  if (/<!-- State\/Province -->/) {
    $inloc = 0;
    $instate = 1;
    #print "instate\n";
  }
  if ($instate == 1 && /.*>([^<]*)<\/font/) {
    $state = $1;
  }

  if (/<!-- County -->/) {
    $instate = 0;
    $incounty = 1;
    #print "incounty\n";
  }
  #print "$_\n" if $incounty == 1;
  if ($incounty == 1 && /.*>([^<]*)<\/font>/) {
    $county = $1;
  }

  if (/<!-- Callsign. -->/) {
    $incounty = 0;
    $incall = 1;
    #print "incall\n";
  }
  if ($incall == 1 && /.*>([^<]*)</) {
    #print "$_\n";
    $callsign = $1;
  }

  if (/<!-- Use -->/) {
    $incall = 0;
    $vals{"$freq,$location"} = join("::", $freq, $offset, $squelch, $location, $state, $county, $callsign);
    $freq = $offset = $squelch = $location = $state = $county = $callsign = undef;
    #print "added $freq: " . $vals{"$freq,$location"} . "\n";
  }

}
close(HTTP);

my $found = 0;

# sort by frequency
foreach my $e (sort { (split(/,/,$a))[0] <=> (split(/,/,$b))[0] } keys %vals) {
  my ($f, undef) = split /,/, $e;
  #print "$e\n";
  if ($f >= $minfreq && $f <= $maxfreq) {
    ($freq, $offset, $squelch, $location, $state, $county, $callsign) =
      split(/::/, $vals{$e});
    $found++;
    if ($username eq "eggdrop" and $found == 2) {
      print " -- truncated, see: $url";
      exit 0;
    }
    print bold($callsign), ": ", bold($freq), " ($offset) ";
    print "$squelch PL " if length($squelch) > 0;
    print "@ $location";
    print ", $county County" if length($county) > 0;
    print ", $state";
    if ($username ne "eggdrop") {
      print "\n";
    }
  }
}

if ($found > 0) {
  exit 0;
}

WORLD:

$freq = $offset = $squelch = $location = $state = $county = $callsign = undef;
%vals = ();

my $haveone = 0;
my $havemany = 0;

$url = "https://www.repeaterbook.com/row_repeaters/keyResult.php?keyword=${encoded}&state_id=0";

#print "$url\n";
open (HTTP, '-|', "curl --max-time 5 --retry 1 --insecure -L -s '$url'");
binmode(HTTP, ":encoding(cp1252)");
while (<HTTP>) {
	#print;
  chomp;
  if (/<!-- freq -->/) {
    $infreq = 1;
  }
  if ($infreq == 1 && />([0-9.]+)</) {
    $freq = $1;
  }
  if ($infreq == 1 && /^([^>]+)<\/td>/) {
    $squelch = $1;
  }

  if (/<!-- Location -->/) {
    $infreq = 0;
    $inloc = 1;
  }
  if ($inloc == 1 && /.*>([^<]*)</) {
    $location = $1;
  }

  if (/<!-- Country -->/) {
    $inloc = 0;
    $instate = 1;
  }
  if ($instate == 1 && /.*>([^<]+)</) {
    $state = $1;
  }

  if (/<!-- Callsign. -->/) {
    $instate = 0;
    $incall = 1;
  }
  if ($incall == 1 && /.*>([^<]*)</) {
    #print "$_\n";
    $callsign = $1;
  }

  if (/<!-- Use -->/) {
    $incall = 0;
    $squelch = "" if !defined($squelch);
    $vals{"$freq,$location"} = join("::", $freq, $squelch, $location, $state, $callsign);
    #print "added $freq: " . $vals{"$freq,$location"} . "\n";
    $freq = $offset = $squelch = $location = $state = $county = $callsign = undef;
  }
}
close(HTTP);

$found = 0;

# sort by frequency
foreach my $e (sort { (split(/,/,$a))[0] <=> (split(/,/,$b))[0] } keys %vals) {
  my ($f, undef) = split /,/, $e;
  #print "$e\n";
  if ($f >= $minfreq && $f <= $maxfreq) {
    ($freq, $squelch, $location, $state, $callsign) =
      split(/::/, $vals{$e});
    $found++;
    if ($username eq "eggdrop" and $found == 2) {
      print " -- truncated, see: $url";
      exit 0;
    }
    print bold($callsign), ": ", bold($freq), " ";
    print "$squelch PL " if length($squelch) > 0;
    print "@ $location";
    print ", $state";
    if ($username ne "eggdrop") {
      print "\n";
    }
  }
}

if ($found == 0) {
  print "not found\n";
}

exit 0;
