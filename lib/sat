#!/usr/bin/perl -w
# Calculate satellite passes.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
use Astro::Coord::ECI;
use Astro::Coord::ECI::TLE;
use Astro::Coord::ECI::TLE::Set;
#use Astro::Coord::ECI::Utils qw{deg2rad rad2deg};
use Math::Trig;
#use Data::Dumper;
use POSIX qw(strftime);
use List::Util qw[min max];
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;
use Util;

my $tleurl="http://www.amsat.org/amsat/ftp/keps/current/nasabare.txt";
my $satnogsurl = "https://db.satnogs.org/api/transmitters/?format=json";

# potential changes:
# 1) parameter for number of passes / length of time?
# 2) parameter for minimum elevation (default 5 deg)?

my %aliases = (
  # lowercase key
  "ao-7" => "AO-07",
  "ariss" => "ISS",
  "dauriadx1" => "DAURIA DX 1",
  "dauria-dx-1" => "DAURIA DX 1",
  "fu3" => "FIREBIRD FU3",
  "firebirdfu3" => "FIREBIRD FU3",
  "firebird-fu3" => "FIREBIRD FU3",
  "fu4" => "FIREBIRD FU4",
  "firebirdfu4" => "FIREBIRD FU4",
  "firebird-fu4" => "FIREBIRD FU4",
  "estar-2" => "e-st\@r-II",
  "estar2" => "e-st\@r-II",
  "estar-ii" => "e-st\@r-II",
  "e-star-ii" => "e-st\@r-II",
  "nodes1" => "NODES 1",
  "nodes-1" => "NODES 1",
  "nodes2" => "NODES 2",
  "nodes-2" => "NODES 2",
  "lapan-a3" => "Lapan A3",
  "alsat-1n" => "AlSat 1N",
  "alsat1n" => "AlSat 1N",
  "tancredo1" => "Tancredo 1",
  "tancredo-1" => "Tancredo 1",
);

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

my $passThreshold = 5;       # degress above horizon
my $goodPassThreshold = 45;  # degress above horizon

my $usageParams = "<sat> <qth>|<grid> [--commonpass <qth2>|<grid2>]";

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  #print "usage: $0 <sat> <grid>|<qth> [<elev>ft|<elev>m]\n";
  print "usage: $0 $usageParams\n" if $username ne "eggdrop";
  print "usage: !sat $usageParams\n" if $username eq "eggdrop";
  exit $exitnonzeroonerror;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $query = "";
my $query2 = "";
my $sat = undef;
my $elev_m = "0";
my $doinfo = 0;
my $dopass = 0;
my $station2 = 0;
my $i = 0;
while ($i <= $#ARGV) {
  if ( $ARGV[$i] =~ /^([0-9]+)(ft|m)/ ) {
    if ($2 eq "m") {
      $elev_m = $1;
    } elsif ($2 eq "ft") {
      $elev_m = $1 * 0.3048;  # feet to meters
    }
  } elsif ($ARGV[$i] eq "--info") {
    $doinfo = 1;
  } elsif ($ARGV[$i] eq "--pass") {
    $dopass = 1;
  } elsif ($ARGV[$i] eq "--elev") {
    $i++;
    if (isNumeric($ARGV[$i])) {
      $passThreshold = $ARGV[$i];
    } else {
      print("error: --elev must be followed by a numeric value representing pass elevation angle threshold\n");
      exit $exitnonzeroonerror;
    }
  } elsif (!defined($sat)) {
    $sat = $ARGV[$i];
  } elsif ($ARGV[$i] eq "--commonpass") {
    $station2 = 1;
  } elsif ($ARGV[$i] eq "--geo") {
    $station2 = 0;
  } else {
    if ($station2 == 0) {
      $query .= " " unless $i == 1;
      $query .= $ARGV[$i];
    } else {
      $query2 .= " " unless $i == 1;
      $query2 .= $ARGV[$i];
    }
  }
  $i++;
}
if ($query =~ /^(.+)\s+[0-9.-]+,[0-9.-]+/) {
  # if both a text parameter and a geo coord, use the text (for irc)
  $query = $1;
}
#print "query: $query\n";
#print "$elev_m\n";

if (not $dopass and not $doinfo) {
  # do both by default
  $dopass = $doinfo = 1;
}

if (length($query) == 0 && $sat ne "list") {
  print "usage: $0 $usageParams\n" if $username ne "eggdrop";
  print "usage: !sat $usageParams\n" if $username eq "eggdrop";
  exit $exitnonzeroonerror;
}

my ($lat, $lon) = (0, 0);
my ($lat2, $lon2) = (0, 0);

if ($sat ne "list") {
  my $geo = argToCoords($query);
  if (!defined($geo)) {
    print "error: not found: $query\n";
    exit $exitnonzeroonerror;
  }
  ($lat, $lon) = split(',', $geo) if $query ne '';
  #print ("$lat, $lon\n");
}

if (length($query2) != 0) {
  my $geo2 = argToCoords($query2);
  if (!defined($geo2)) {
    print "error: not found: $query2\n";
    exit $exitnonzeroonerror;
  }
  ($lat2, $lon2) = split(',', $geo2);
  #print "query2: $query2, $lat2, $lon2\n";
}

my $now = time();

my $sta = Astro::Coord::ECI->universal($now)->
  geodetic(deg2rad($lat), deg2rad($lon), $elev_m / 1000);  #kilometers
$sta->set(refraction => 0);
$sta->universal($now);

my $sta2 = undef;
if (length($query2) != 0) {
  $sta2 = Astro::Coord::ECI->universal($now)->
    geodetic(deg2rad($lat2), deg2rad($lon2), 0);  #kilometers
  $sta2->set(refraction => 0);
  $sta2->universal($now);
}

my @data;
open(TLE, '-|', "curl --max-time 5 -s -k -L $tleurl");
while (<TLE>) {
  push (@data, $_);
}
close(TLE);

#my $seen = 0;
#open(TLE, '-|', "curl -k -L -s http://www.amsat.org/amsat/ftp/keps/current/nasa.all");
#while (<TLE>) {
#  if (/TO ALL RADIO AMATEURS/) {
#    $seen = 1;
#    next;
#  }
#  if (/^\s*$/) {
#    next;
#  }
#  if (/^\/EX/) {
#    next;
#  }
#  push (@data, $_) if $seen == 1;
#}
#close(TLE);

#print("records: $#data\n");
my @elements = Astro::Coord::ECI::TLE::Set->aggregate(
		  Astro::Coord::ECI::TLE->parse(@data));
#print("records: $#data\n");

# only passes for the next 24h
my $timewindow = 1 * 86400; # seconds
my $finish = $now + $timewindow;

my $found = 0;

if (defined($aliases{$sat})) {
  $sat = $aliases{lc($sat)};
}

if (lc($sat) eq "list") {
  my @sats;
  foreach my $tle (@elements) {
    my $name = $tle->get('name');
    $name =~ s/ /-/g;
    push(@sats, $name);
  }

  my $list = join(" ", @sats);
  my $frag = undef;
  my $limit = 67;
  $limit = 400 if $username eq "eggdrop";
  do {
    # line wrap
    $frag = undef;
    if (length $list > $limit) {
      $list =~ s/^(.{$limit}.*?)\s(.*)$/$1/;
      $frag = $2;
      print $list, "\n";
      $list = $frag;
    }
  } while defined ($frag);
  print $list, "\n";
  exit 0;
}

my ($id, $name);
my @passes;
my @passes2;
foreach my $tle (@elements) {
  my $tlename = $tle->get('name');
  my $tleid = $tle->get('id');
  $tlename =~ s/ /-/g;
  if (lc($tlename) eq lc($sat) or (isNumeric($sat) and $tleid == $sat)) {
    #print "$tlename\n";
    $tle->validate($now, $finish) or next;
    $found = 1;
    #print $tle->tle_verbose(), "\n";
    #print $tlename = $tle->get('tle'), "\n";
    #print "doing passes..\n";
    $id = $tleid;
    $name = $tlename;
    $tle->set('pass_threshold', deg2rad($passThreshold)); # minimum peak elevation
    $tle->set('visible', 0);
    $tle->set('horizon', 0);
    push(@passes, $tle->pass($sta, $now, $finish));
    push(@passes2, $tle->pass($sta2, $now, $finish)) if defined $sta2;
  }
}

if ($found == 0) {
  print "satellite not found: $sat\n";
  exit $exitnonzeroonerror;
}

#print("passes: $#passes\n");

#print "      Date/Time          Satellite        Elevation  Azimuth Event\n";

if ($#passes < 0) {
  print "$sat: no passes found within 24h\n";
  exit $exitnonzeroonerror if not $doinfo;
}

if (defined $sta2) {
  my $grid1 = coordToGrid($lat, $lon);
  my $grid2 = coordToGrid($lat2, $lon2);
  #print "common passes of $sat between $grid1 and $grid2\n";
  @passes = sort {$a->{time} <=> $b->{time}} @passes;
  @passes2 = sort {$a->{time} <=> $b->{time}} @passes2;
  my ($i, $j) = (0,0);
  my $found = 0;
  while ($i < $#passes and $j < $#passes2) {
    #print "i, j: $i, $j\n";
    my ($p1s, $p1e) = getStartEnd($passes[$i]);
    my ($p2s, $p2e) = getStartEnd($passes2[$j]);
    my ($maxel1, $maxel2) = (0.0,0.0);

    if ($p1e < $p2s) {
      $i++; next;
    }
    if ($p2e < $p1s) {
      $j++; next;
    }
    my $start = max($p1s, $p2s);
    my $end = min($p1e, $p2e);
    #print "start: ", strftime("%Y-%m-%d %H:%Mz", gmtime($start)), "\n";
    #print "end: ", strftime("%Y-%m-%d %H:%Mz", gmtime($end)), "\n";
    my $delta = 60;

    my $body1 = $passes[$i]{body};
    my $body2 = $passes2[$j]{body};

    my $sparkline1 = "";
    my $sparkline2 = "";

    my ($saz1, $eaz1) = (undef, undef);
    my ($saz2, $eaz2) = (undef, undef);

    for (my $time = $start; $time <= $end; $time += $delta) {
      $body1->{station} = $sta;
      eval {$body1->universal($time); 1;} or do {
	warn $@;
	last;
      };
      my ($azim1, $elev1, $range1) = $body1->azel();
      $sparkline1 .= elToSpark(rad2deg($elev1));
      $maxel1 = rad2deg($elev1) if rad2deg($elev1) > $maxel1;
      $saz1 = rad2deg($azim1) if not defined $saz1;
      $eaz1 = rad2deg($azim1);

      $body2->{station} = $sta2;
      eval {$body2->universal($time); 1;} or do {
	warn $@;
	last;
      };
      my ($azim2, $elev2, $range2) = $body2->azel();
      $sparkline2 .= elToSpark(rad2deg($elev2));
      $maxel2 = rad2deg($elev2) if rad2deg($elev2) > $maxel2;
      $saz2 = rad2deg($azim2) if not defined $saz2;
      $eaz2 = rad2deg($azim2);

#      printf "%s:: %s: %.1f el @ %.0f az ;\t%s: %.1f el @ %.0f az\n",
#	strftime("%H:%Mz", gmtime $time),
#	$grid1, rad2deg($elev1), rad2deg($azim1),
#	$grid2, rad2deg($elev2), rad2deg($azim2);
    }
    printf "%s %s: %3s %s %-3s :%s; max el ~%.0f°\n", $grid1,
      strftime("%Y-%m-%d %H:%Mz", gmtime $start),
      azToNEWS($saz1), $sparkline1, azToNEWS($eaz1),
      strftime("%H:%Mz", gmtime $end), $maxel1;
    printf "%s %s: %3s %s %-3s :%s; max el ~%.0f°\n", $grid2,
      strftime("%Y-%m-%d %H:%Mz", gmtime $start),
      azToNEWS($saz2), $sparkline2, azToNEWS($eaz2),
      strftime("%H:%Mz", gmtime $end), $maxel2;
    $found++;
    $i++; $j++;

    exit 0 if $found >= 2 and $username eq "eggdrop";
  }
  if (not $found) {
    print "No common passes found within the next ", $timewindow/3600, " hours\n";
  }
  exit 0;
}

my $numpasses = 3;
$numpasses = 100 if $username ne "eggdrop";
my $first = 1;

$numpasses = $#passes if $#passes < $numpasses;

goto done if (not $dopass);

foreach my $pass (sort {$a->{time} <=> $b->{time}} @passes) {
  #print "\n";
  foreach my $event (@{$pass->{events}}) {

    if ($event->{event} eq "rise") {
      if ($first == 1) {
	printf("%s (#%d) @%s: ",
	  bold($name = $event->{body}->get('name')),
	  $id = $event->{body}->get('id'),
	  coordToGrid($lat, $lon));
	$first = 0;
      }
      print "\n  " if $username ne "eggdrop";
      print green("AOS"),
	    strftime(" %Y-%m-%d ", gmtime($event->{time})),
	    bold(strftime("%H:%Mz", gmtime($event->{time}))),
	    sprintf(" az %d°; ", rad2deg($event->{azimuth}));
    }

    if ($event->{event} eq "max") {
      print "max el ", bold(sprintf("%d°", rad2deg($event->{elevation})));
      printf(" az %d°; ", rad2deg($event->{azimuth}));
    }

    if ($event->{event} eq "set") {
      print red("LOS");
      printf(" %s az %d°",
	bold(strftime("%H:%Mz", gmtime($event->{time}))),
	rad2deg($event->{azimuth}));

      --$numpasses;
      print "\n" if $numpasses == 0;
      print " ‖ " if $numpasses > 0 && $username eq "eggdrop";
      goto done if $numpasses == 0;
    }

    # not reached
    #printf("%s %-15s %9.1f %9.1f %-5s\n",
    #  scalar gmtime($event->{time}),
    #  $event->{body}->get('name'),
    #  rad2deg($event->{elevation}),
    #  rad2deg($event->{azimuth}),
    #  $event->{event}) if 0;
    #
    #if ($event->{event} eq "set") {
    #  exit 0;
    #}
  }
}
print "\n";
done:

if (not $doinfo) {
  exit 0;
}

if (not defined $id) {
  print "error: undefined \$id\n";
  exit $exitnonzeroonerror;
}

$first = 1;
# IPv4 because satnogs IPv6 gets cut off
open(TX, '-|', "curl -4 -s --max-time 10 -L -k $satnogsurl");
while (<TX>) {
  #print;
  s/}.\{/},\n{/g;
  @_ = split "\n";
  foreach my $e (@_) {
    #print STDERR "$e\n" if $e =~ /$id/;
    my @kv = split ",", $e;
    my %link;
    foreach my $pair (@kv) {
      if ($pair =~ /"(\w+)":(true|false|null|\d+|"[^"]+")/) {
	my ($k, $v) = ($1, $2);
	$v =~ s/^"(.*)"$/$1/;
	#print "$k => $v\n";
	$link{$k} = $v;
      }
    }
    #local $Data::Dumper::Terse = 1;
    #print "missing id: ", Dumper(\%link), "\n" if not defined $link{norad_cat_id};
    #print "link: ", Dumper(\%link), "\n" if $id == ($link{norad_cat_id} || -1);
    #print "sat: $link{norad_cat_id}\n" if defined $link{norad_cat_id};
    if (defined($link{norad_cat_id}) and
	  $link{norad_cat_id} == $id and
	  $link{alive} eq "true" and
	  not $link{description} =~ m/(PE0SAT|drift|current)/i) {

      if ($first == 1) {
	printf("%s (#%d): ", bold($name), $id);
	print "\n" if $username ne "eggdrop";
	$first = 0;
      } else {
	print " ‖ " if $username eq "eggdrop";
      }

      print "  " if $username ne "eggdrop";
      if ($link{downlink_low} ne "null" and
		$link{downlink_high} eq "null" and
		$link{uplink_low} eq "null" and
		$link{uplink_high} eq "null") {
	print "transmitting: ";
      }
      if ($link{downlink_low} ne "null" and
		$link{downlink_high} eq "null" and
		$link{uplink_low} ne "null" and
		$link{uplink_high} eq "null") {
	print "repeating: ";
      }
      if ($link{downlink_low} ne "null" and
		$link{downlink_high} ne "null" and
		$link{uplink_low} ne "null" and
		$link{uplink_high} ne "null") {
	print "linear: ";
      }
      print "\"$link{description}\" ";
      print hzToMhz($link{uplink_low}) if $link{uplink_low} ne "null";
      print "-", hzToMhz($link{uplink_high}) if $link{uplink_high} ne "null";
      print "/" if $link{uplink_low} ne "null";
      print bold(hzToMhz($link{downlink_low})) if $link{downlink_low} ne "null";
      print "-", bold(hzToMhz($link{downlink_high})) if $link{downlink_high} ne "null" and $link{downlink_high} != $link{downlink_low};
      print " [inverting]" if $link{invert} eq "true" and $link{mode_id} != 1;
      print " mode ", mode($link{mode_id});
      print " $link{baud} baud" if $link{baud} ne "null" and $link{baud} != 0;
      print "\n" if $username ne "eggdrop";
    }
  }
}
close(TX);
print "\n" if $username eq "eggdrop";

sub hzToMhz {
  my $hz = shift;
  return $hz / 1000000;
}

sub mode {
  my $val = shift;
  my %modes;
  $modes{1} = "FM";
  $modes{2} = "AFSK1k2";
  $modes{4} = "APRS";
  $modes{5} = "SSTV";
  $modes{6} = "CW";
  $modes{7} = "FMN";
  $modes{9} = "USB";
  $modes{15} = "GFSK4k8";
  $modes{17} = "AHRPT";
  $modes{18} = "AFSK9k6";
  $modes{19} = "AM";
  $modes{20} = "LSB";
  $modes{21} = "FSK1k2";
  $modes{22} = "FSK9k6";
  $modes{25} = "APRS9k6";
  $modes{26} = "GFSK1k2";
  $modes{27} = "GFSK2k4";
  $modes{28} = "GFSK9k6";
  $modes{29} = "GFSK19k2";
  $modes{30} = "MSK1k2";
  $modes{31} = "MSK2k4";
  $modes{32} = "MSK4k8";
  $modes{33} = "MSK9k6";
  $modes{34} = "MSK19k2";
  $modes{35} = "MSK38k4";
  $modes{36} = "GMSK1k2";
  $modes{37} = "GMSK2k4";
  $modes{38} = "GMSK4k8";
  $modes{39} = "GMSK9k6";
  $modes{40} = "PSK31";
  $modes{41} = "PSK63";
  $modes{42} = "QPSK31";
  $modes{43} = "QPSK63";
  $modes{44} = "APT";
  $modes{45} = "HRPT";
  $modes{46} = "FSK4k8";
  $modes{47} = "BPSK1k2";
  $modes{48} = "GMSK19k2";
  $modes{49} = "AFSK";
  $modes{50} = "BPSK";
  $modes{51} = "FSK19k2";
  $modes{52} = "BPSK115k2";
  $modes{53} = "LRPT";
  $modes{54} = "BPSK9k6";
  $modes{55} = "FFSK1k2";
  $modes{56} = "FSK2k4";
  $modes{57} = "DSTAR";
  $modes{58} = "DUV";
  $modes{59} = "CERTO";
  return $modes{$val} if defined $modes{$val};
  print "unknown mode: $val\n";
}

sub getStartEnd {
  my $pass = shift;
  my ($start, $end);

  foreach my $event (@{$pass->{events}}) {
    if ($event->{event} eq "rise") {
      $start = $event->{time};
    }
    if ($event->{event} eq "set") {
      $end = $event->{time};
    }
  }
  return ($start, $end);
}

sub elToSpark {
  my $el = shift;
  if ($el > 70.0) {
    return green("█");
  } elsif ($el > 60.0) {
    return green("▇");
  } elsif ($el > 50.0) {
    return green("▆");
  } elsif ($el > 40.0) {
    return green("▅");
  } elsif ($el > 30.0) {
    return yellow("▄");
  } elsif ($el > 20.0) {
    return yellow("▃");
  } elsif ($el > 10.0) {
    return red("▂");
  } else {
    return red("▁");
  }
}

