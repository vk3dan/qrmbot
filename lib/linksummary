#!/usr/bin/perl
# Create a description of a link.  2-clause BSD license.
#
# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

use URI::Escape;
use Encode qw(/decode/);
use Time::Local;
use Time::Piece ();
use List::Util qw[min max];
use POSIX qw(strftime);

our $imgur_key=undef;
my $imgurfile = $ENV{'HOME'} . "/.imgurkey";
if (-e ($imgurfile)) {
  require($imgurfile);
}

my $timeout = 4;	# max 4 seconds

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
my $highlight="vt220";
$highlight = "none" if ! -t STDOUT;
$highlight = "irc" if $username eq "eggdrop";

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));
@ARGV = uniq(@ARGV);	# deduplicate - no reason to process the same url twice

my $i = 0;
while ($i <= $#ARGV) {

  $ARGV[$i] =~ s/'//g; # sanitize
  our $deamped = 0;

  if ($ARGV[$i] =~ m|^https?://[^/]*?/amp/|i) {
    my $deamped = deamp($ARGV[$i]);
    if (defined ($deamped)) {
      print "⚡", yellow("DeAmped"), ": ";
      $ARGV[$i] = $deamped;
      $deamped = 1;
    }
  }

  if ($ARGV[$i] =~ m|^https?://(www\.\|m\.)?youtube\.com/watch\?v=([\w-]+)|i) {
    printYouTubeMetaData($2);
  } elsif ($ARGV[$i] =~ m|^https?://youtu\.be/([\w-]+)|i) {
    printYouTubeMetaData($1);
  } elsif ($ARGV[$i] =~ m|^https?://t\.co/\w+|i or
	  $ARGV[$i] =~ m|^https?://(mobile\.)?twitter\.com/|i) {
    doTwitter($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?imdb\.com/title/tt\d+|i or
	  $ARGV[$i] =~ m|^https?://imdb\.to/\w+|i) {
    doImdb($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(\w+)\.wikipedia\.org/wiki/([^/\s]+)|i) {
    doWiki($1, $2);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?reddit\.com/r/\w+/comments/\w+/|i or
	  $ARGV[$i] =~ m|^https?://redd\.it/\w+|i) {
    doReddit($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://swap\.qth\.com/view_ad\.php\?counter=\d+|i) {
    doQthCom($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?qrz\.com/(db\|lookup)/[A-Z0-9]+|i) {
    doQrzDb($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.\|smile\.)?amazon\.(com\|co\.jp\|ca\|co\.uk)/(.*/)?dp/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://a.co/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.\|smile\.)?amazon\.(com\|co\.jp\|ca\|co\.uk)/gp/product/\w+/?|i) {
    doAmazon($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?xkcd.com/(\d+)/?$|) {
    doXkcd($2);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?google.com/maps/.*@([0-9.-]+),([0-9.-]+)|i) {
    doQth($2,$3);
  } elsif ($ARGV[$i] =~ m|^https?://goo\.gl/maps/|i or
	  $ARGV[$i] =~ m|^https?://(www\.)?google\.com/maps/|i) {
    # noop
  } elsif ($ARGV[$i] =~ m|^https?://(\w+\.)?imgur\.com/|) {
    doImgur($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://wireless2\.fcc\.gov/UlsApp/ApplicationSearch/.*\?applID=|) {
    doFccApp($ARGV[$i]);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?ae7q\.com/query/list/GenLicAvail.php\?REGION=([0-9]+)|) {
    doAe7qRegion($2);
  } elsif ($ARGV[$i] =~ m|^https?://(www\.)?ae7q\.com/query/data/CallHistory\.php\?CALL=([A-Z0-9]+)|) {
    doAe7qCall($2);
  } elsif ($ARGV[$i] =~ m|^https?://.*zoom\.us/j/[0-9]+|) {
    # noop
  } elsif ($ARGV[$i] =~ m|^https?://| and
	  not $ARGV[$i] =~ /\.(bmp|tif|gif|jpe?g|jpe|png|mp[34]|pdf|docx?|xlsx?|exe|dll|msi|wav|wma|flac|shn|7z|zip|deb|rpm|rar|tgz|tar|dmg|iso|apk|jar|avi|m4v|mov|mpe?g|vob|swf|wmv|gz|xz|bz2)/i) {
    doHtml($ARGV[$i]);
  }

  $i++;
}

sub printYouTubeMetaData {
  my $id = shift;
  my $url = "https://youtube.com/watch?v=$id";
  my $shortcut = "http://youtu.be/$id";
  my $vidimg = "https://i.ytimg.com/vi/$id/hqdefault.jpg";
  my $done = 0;
  my ($title, $len, $desc, $count, $pubdate, $genre, $nsfw, $unlisted, $paid, $author, $likes, $dislikes, $live);
  open(HTTP, '-|', "curl -4 --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/Our systems have detected unusual traffic from your computer network./) {
      print;
      exit 0;
    }
    if (/This video is no longer available/) {
      s/^\s*//; s/\s*$//;
      print;
      print "\n";
      exit 0;
    }
    if (/<meta itemprop="(\w+)" content="([^"]*)">/) {
      my ($k, $v) = ($1, $2);
      $v = decodeEntities($v);
      #print "$k = $v\n";
      $title = $v if $k eq "name";
      #$len   = $v if $k eq "duration";
      $desc  = $v if $k eq "description";
      $count = $v if $k eq "interactionCount";
      $pubdate = $v if $k eq "datePublished";
      $genre = $v if $k eq "genre";
      $nsfw = $v eq "False" ? 1 : 0 if $k eq "isFamilyFriendly";
      $unlisted = $v eq "True" ? 1 : 0 if $k eq "unlisted";
      $paid = $v eq "True" ? 1 : 0 if $k eq "paid";
    }
    if (/"author\\":\\"([^"]+)\\"/) {
      $author = $1;
    }
    if (/dur=(\d+)/) {
      $len = $1;
    }
    if (/([0-9,]+) watching now/i) {
      my $t = $1;
      $t =~ s/,//g;
      $count = $t if $t > 2;
    }
#    if (/"shortDescription":"([^"]+)"/) {
#      $desc = $1;
#    }
    if (/"like this video along with ([0-9,]+) other people"/) {
      $likes = $1;
      $likes =~ s/,//g;
    }
    if (/"dislike this video along with ([0-9,]+) other people"/) {
      $dislikes = $1;
      $dislikes =~ s/,//g;
    }
    if (/"isLiveNow\\":true/) {
      $live = 1;
    }
  }
  close(HTTP);

  $desc = "(no description)" if $desc =~ /^\s*$/;
  if (length $desc > 100) {
    $desc = substr($desc, 0, 100) . "…";
  }

  use integer;
  my $h = $len / 3600;
  my $m = ($len - (($len / 3600) * 3600)) / 60;
  my $s = $len - (($len / 60) * 60);

  print bold("\"$title\""), " by $author on $pubdate; ";
  print "${h}h" if $h > 0;
  print "${m}m" if $m > 0;
  print "${s}s;" if $s > 0;
  print red("[LIVE]") if $live == 1;
  print " $count views" if not defined $live or $live != 1;
  print " $count watching" if $live == 1;
  print green(" ${likes}↑") if defined $likes;
  print red(" ${dislikes}↓") if defined $dislikes;
#  print " ($genre)" if defined $genre;
  print red(" [NSFW]") if $nsfw == 1;
  print green(" [PAID]") if $paid == 1;
  print yellow(" [UNLISTED]") if $unlisted == 1;
#  print ": $desc $shortcut img: $vidimg\n";
  print ": $desc img: $vidimg\n";
}




sub doTwitter {
  my $url = shift;
  my $id = undef;
  my $username = undef;
  my $origUsername = undef;
  my $directRT = 0;

  if ($url =~ /https?:\/\/t\.co\/\w+/) {
    open (HTTP, '-|', "curl --max-time $timeout -L -k -s -o /dev/null -w \"%{url_effective}\" '$url'");
    while(<HTTP>) {
      $url = $_;
    }
    close(HTTP);
  }
  #  'curl --max-time $timeout -Ls -o /dev/null -w "%{url_effective}" "https://t.co/aoVVgKEfqC"'

  if ($url =~ /https?:\/\/(mobile\.)?twitter\.com\/(\w+)\/status(es)?\/(\d+)/) {
    $username = $2;
    $id = $4;
  }

  if (not defined $username and $url =~ /https?:\/\/(mobile\.)?twitter\.com\/(\w+)\/?/) {
    # this is for getting the last tweet for a user
    $username = $2;

    my $token = getTwitterAuthToken($url);

    my $targeturl = "https://mobile.twitter.com/i/nojs_router?path=%2F$username";

    $url =~ s/http:/https:/;

    open (HTTP, '-|', "curl --max-time $timeout -L -k -s -H \"Referer: $url\" --data authenticity_token=$token \"$targeturl\"");
    binmode(HTTP, ":utf8");
    while(<HTTP>) {
      chomp;
      if (not defined $id and /retweeted/) {
	#print "retweeted\n";
	$directRT = 1;
	$origUsername = $username;
      }
      if (not defined $id and /<div class="tweet-text" data-id="(\d+)">/) {
	$id = $1;
	next;
      }
    }
    close(HTTP);
  }

  if (not defined $id or not defined $username) {
    return;
  }

  my $token = getTwitterAuthToken($url);
  my $targeturl = "https://mobile.twitter.com/i/nojs_router?path=%2F$username%2Fstatus%2F$id";

  my $inusername = 0;
  my $intext = 0;
  my $infullname = 0;
  my $inmedia = 0;

  #my $username = undef;
  my $fullname = undef;
  my $text = undef;
  my $date = undef;
  my $verified = 0;
  my $media = undef;
  my $tco = undef;
  my $rt = undef;
  #my @links;

  #print "$ARGV[$i]\n";
  #print "$url\n";
  #print "$token\n";
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s -H \"Referer: $url\" --data authenticity_token=$token '$targeturl'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    #print;
    chomp;
    if (/<span class="username">/) {
      $inusername = 1;
      next;
    }
    if ($inusername == 1 and /<span>@<\/span>(\w+)\s*$/) {
      $username = $1 ; #if ! defined($username);
      $inusername = 0;
    }
    if (/class="tweet-text" data-id="$id"/) {
      $intext = 1;
      next;
    }
    if ($intext == 1 and /<div[^<]*>\s*(.*)/) {
      #print;
      $text = $1;
      $text = decodeEntities($text);
      #$text =~ s/\s*<a href="(https?:\/\/t.co\/\w+)".*>.*?<\/a>\s*/$1/;
      $text =~ s/<a href="\/\w+"class="twitter-atreply.*?>(.*?)<\/a>/$1/g;
      $text =~ s/<a href="\/hashtag.*?class="twitter-hashtag.*?>(.*?)<\/a>/$1/g;
      if ($text =~ /data-expanded-url="(https?:\/\/twitter\.com\/\w+\/status\/\d+)"/) {
	$rt = $1;
      }
      #print "\n\n$text\n\n";
      $text =~ s/<a href="(https?:\/\/t\.co\/\w+)".*?data-expanded-url="(https?:\/\/twitter\.com\/\w+\/status\/\d+)".*?class="twitter_external_link.*?>.*?<\/a>/$1/g;
      $text =~ s/<a href=.*?data-expanded-url="([^"]+)".*?class="twitter_external_link.*?>.*?<\/a>/$1/g;
      #print "\n\n$text\n\n";
      #if ($text =~ /data-expanded-url="([^"]+)"/) {
      #  my $dataurl = $1;
      #  if (not $dataurl =~ /twitter\.com/) {
  #	push (@links, $dataurl);
  #      }
  #    }
      if ($text =~ /\s*<a href="(https?:\/\/t.co\/\w+)".*>(.*?)<\/a>/) {
	$tco = $1 if defined $1;
	my $extrabits = $2;
	if ($extrabits =~ /twitter_external_link/) {
	  $tco = undef;
	}
	$text =~ s/\s*<a href="(https?:\/\/t.co\/\w+)".*>.*?<\/a>//;
      }
      #print "$tco\n";
      #<a href="https://t.co/z4JHTvtLNy"data-pre-embedded="true"rel="nofollow"data-entity-id="950835234823553024"dir="ltr"data-url="https://twitter.com/SethAbramson/status/950835283997741057/photo/1"data-tco-id="z4JHTvtLNy"class="twitter_external_link dir-ltr tco-link has-expanded-path"target="_top"data-expanded-path="/SethAbramson/status/950835283997741057/photo/1">pic.twitter.com/z4JHTvtLNy</a>
      $intext = 0;
      next
    }
    if (/<a href="#" class="">([^<]+)<\/a>/) {
      $date = $1;
      # 4:30 PM - 22 Sep 2018
      if ($date =~ /(\d\d?):(\d\d) ([AP]M) - (\d+) (\w+) (\d+)$/) {
	# convert from localtime in california
	$ENV{TZ} = "PST8PDT";
	my ($m, $h, $d, $mon, $y) = ($2, $1, $4, $5, $6);
	$h += 12 if $3 eq "PM" and $h != 12;
	my $time = timelocal(0, $m, $h, $d, monthNameToNum($mon) - 1, $y);
	$date = scalar(gmtime($time)) . " UTC";
      }
    }
    if (/<div class="fullname"/) {
      $infullname = 1;
      next;
    }
    if ($infullname == 1 and /<strong>([^<]+)<\/strong>/) {
      $fullname = $1;
      $fullname = decodeEntities($fullname)
    }
    if ($infullname == 1 and /verified.gif/) {
      $verified = 1;
    }
    if ($infullname == 1 and /<\/div>/) {
      $infullname = 0;
    }
    if (/<div class="media">/) {
      $inmedia = 1;
      next;
    }
    if ($inmedia == 1 and /<img src="(https?:\/\/pbs.twimg.com\/media\/\w+\.jpg):/) {
      $media = $1;
    }
  }
  close(HTTP);

  # 223   147   93     “     LEFT DOUBLE QUOTATION MARK
  # 224   148   94     ”     RIGHT DOUBLE QUOTATION MARK
  # ❝ ❞
  # ☑ ✓ ✔ ✅

  if (not defined $text) {
    #print "not found\n";
    #exit 0;
    return;
  }

  #print "TEXT: $text\n";
  #print "LINKS: ", join(" ", @links), "\n";
  #print "MEDIA: $media\n";
  #print "TCO: $tco\n";

  my $verifiedText = "";
  $verifiedText = lightblue("✔") if $verified == 1;
  $text =~ s/^\s*$//g;
  $text =~ s/\n\s*\n/\n/g;
  #$text =~ s/\n/\n  ❝/g;
  $text =~ s/(\S)\n(\S)/$1 $2/g;
  $text =~ s/\n//g;
  print "\@${origUsername} RT:" if defined $origUsername and $directRT = 1;
  print "\"$text\" ";
  #print " ", join(" ", @links) if $#links >= 0;
  print "$media " if defined $media;
  print "RT: $tco " if defined $rt and defined $tco;
  print "$tco " if defined $tco and not defined $media and not defined $rt;
  print "— \@$username ($fullname)$verifiedText, $date\n";

  if (defined $rt) {
    #print "$0 $rt\n";
    system "$0 $rt";
    #exit 0;
  }

}

sub getTwitterAuthToken {
  my $url = shift;
  my $token = undef;
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (!defined($token) and /name="authenticity_token"/) {
      if (/value="([0-9a-f]+)"/) {
	$token = $1;
      }
    }
  }
  close(HTTP);
  return $token;
}


sub doImdb {
  my $url = shift;
  my ($title, $desc, $rating, $ratings);
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/<meta property='og:title' content="([^"]*)"/) {
      $title = $1;
    }
    if (/<meta name="description" content="([^"]*)"/) {
      $desc = $1;
      if (length $desc > 300) {
	$desc = substr($desc, 0, 300) . "…";
      }
    }
    if (/<strong title="([\d.]+) based on ([\d,]+) user ratings">/) {
      ($rating, $ratings) = ($1, $2);
    }
  }
  close(HTTP);

  return if !defined($title);

  print bold("\"$title\"");
  print " $rating", yellow("★"), " ($ratings ratings)" if defined $rating;
  print " — $desc" if defined $desc;
  print "\n";
}

sub doWiki {
  my $lang = shift;
  my $article = shift;
  my ($desc, $title);
  my $url = "https://$lang.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles=$article";
  #print "$url\n";
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/"title":"([^"]*)"/) {
      $title = $1;
      $title =~ s/\\u([0-9a-f]{4})/chr(hex($1))/egi;
      $title =~ s/\\"/"/g;
      $title =~ s/\\n/ /g;
    }
    if (/"extract":"(.*)"/) {
      $desc = $1;
      $desc =~ s/\\u([0-9a-f]{4})/chr(hex($1))/egi;
      $desc =~ s/\\"/"/g;
      $desc =~ s/\\n/ /g;
      if (length $desc > 300) {
	$desc = substr($desc, 0, 300) . "…";
      }
    }
  }
  close(HTTP);
  if (defined($title) and defined($desc)) {
    my $shortUrl = shortenUrl("https://$lang.wikipedia.org/wiki/$article");
    print bold("\"$title\" ");
    print "$shortUrl " if defined $shortUrl and length($shortUrl) > 0;
    print "— $desc\n";
  }
}

sub doHtml {
  my $url = shift;
  my ($title, $desc, $charset, $contenttype, $httpcode, $shortUrl, $decoded);
  $decoded = 0;
  # -D - => output headers
  # -f => fail to have no output for 404
  # -L => follow 302
  # -k => insecure -- don't care about certs
  # -s => silent
  # -A => user agent
  # -H Accept => should cut down on images and the like, but check headers
  #print "curl --compressed --max-time $timeout -D - -f -L -k -s -H \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9\" '$url'";
  my $useragent = "Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0";
  open (HTTP, '-|', "curl --compressed --max-time $timeout -D - -f -L -k -s -H \"Accept: text/html,application/xhtml+xml,application/xml;q=1.9\" -A \"$useragent\" '$url'");
  while (<HTTP>) {
    #print;
    chomp;
    if (/^HTTP\/[0-9.]+\s*(\d+).*?$/) {
      $httpcode = $1;
      #print "$httpcode\n";
    }
    # want to ignore content-type if getting a 302 redirect
    if (defined($httpcode) and $httpcode < 300 and /^Content-Type:\s+(.*?)$/i) {
      $contenttype = $1;
      #print "$contenttype\n";
      if (not $contenttype =~ /^(text\/html)|(application\/(xhtml|xml))/) {
	close(HTTP);
	return;
      }
      if ($contenttype =~ /charset=(.*)/i) {
	if ($1 =~ /UTF-?8/i) {
	  binmode(HTTP, ":utf8");
	  $charset = "utf8";
	  $decoded = 1;
	}
      }
      last;
    }
  }
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $origpage = <HTTP>;
  my $page;
  close(HTTP);

  if (not defined($charset) and
      $origpage =~ /^.*<meta\s+http-equiv="Content-Type"\s+content=".*?charset=([^"]+)"/mi) {
    $charset = $1;
  }
  if (not defined($charset) and
      $origpage =~ /^.*<meta\s+charset="([^"]+)"/mi) {
    $charset = $1;
  }

  if (defined($charset) and not $decoded) {
    $page = decode($charset, $origpage);
  } else {
    $page = $origpage;
  }

  if (defined($page) and not utf8::valid($page)) {
    # failed utf8
    print "Error: Invalid UTF-8 sequence(s)\n";
    exit 0;
  }
  if (not defined($page)) {
    $page = $origpage;
  }

  #print "charset: $charset\n";
  #print "is utf8? ", (utf8::is_utf8($page)), "\n";
  #print "valid utf8? ", (utf8::valid($page)), "\n";

  if ($page =~ /<title.*?>\s*([^<]+?)\s*<\/title>/im) {
    $title = $1;
    $title =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+property="og:title"\s+content="([^"]+)"/im) {
    $title = $1;
    $title =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+content="([^"]+)"\s+property="og:title"/im) {
    $title = $1;
    $title =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+name="dcterms.title"\s+content="([^"]+)"/im) {
    $title = $1;
    $title =~ s/\s\s+/ /g;
  }
  if (not defined($desc) and
	  $page =~ /<meta\s+name="description"\s+content="([^"]+)"/im) {
    $desc = $1;
    $desc =~ s/\s\s+/ /g;
  }
  if (not defined($desc) and
	  $page =~ /<meta\s+content="([^"]+)"\s+name="description"/im) {
    $desc = $1;
    $desc =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+.*?property="og:description"\s+content="([^"]+)"/im) {
    $desc = $1;
    $desc =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+content="([^"]+)"\s+property="og:description"/im) {
    $desc = $1;
    $desc =~ s/\s\s+/ /g;
  }
  if ($page =~ /<meta\s+name="DC.Description.Abstract"\s+content="([^"]+)"/im) {
    $desc = $1;
    $desc =~ s/\s\s+/ /g;
  }
  if ($page =~ /<link\s+rel="shortlink"\s+href="([^"]+)"/im) {
    $shortUrl = $1;
    # relative shortlinks
    if ($shortUrl =~ m|^//|) {
      my $tmp = $url;
      $tmp =~ s|://.*$|:|;
      $tmp .= $shortUrl;
      $shortUrl = $tmp;
    } elsif ($shortUrl =~ m|^/|) {
      my $tmp = $url;
      $tmp =~ s|://([^/]+)/.*$|://$1|;
      $tmp .= $shortUrl;
      $shortUrl = $tmp;
    }
  }

  #print "title: $title\n";
  #print "desc: $desc\n";

  our $deamped;
  $shortUrl = shortenUrl($url)
	if not defined($shortUrl) or length($shortUrl) > 50 or $deamped == 1;

  return if not defined($title) and not defined($desc) and not defined($shortUrl);

  if (defined($desc) and length($desc) > 300) {
    $desc = substr($desc, 0, 300) . "…";
  }

  $title = decodeEntities($title) if defined($title);
  $desc = decodeEntities($desc) if defined($desc);
  $title =~ tr/\n\r/  / if defined($title);
  $desc =~ tr/\n\r/  / if defined($desc);

  print bold("\"$title\"") if defined ($title);
  print " $shortUrl" if defined($shortUrl) and length($shortUrl) > 0;
  print " — $desc" if defined ($desc);
  print "\n";
}

sub doReddit {
  my $url = shift;

  my ($id, $title, $shortCommentUrl);

  # example url for particular comment: https://www.reddit.com/r/dayton/comments/5bntme/what_neighborhoods_in_dayton_would_you_tell/d9w9euj/

  if ($url =~ m|https?://(www\.)?reddit\.com/r/\w+/comments/(\w+)/([^/]+/\w+/)?|) {
    $id = $2;
    $shortCommentUrl = shortenUrl($url) if defined($3);
  } elsif ($url =~ /https?:\/\/redd\.it\/(\w+)/) {
    $id = $1;
  } else {
    return;
  }

  open(HTTP, '-|', "curl --max-time $timeout -A foo -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (/<title.*?>([^<]+)<\/title>/im) {
      $title = decodeEntities($1);
    }
  }
  close(HTTP);

  print bold("\"$title\"") if defined ($title);
  print " http://redd.it/$id " if defined($id);
  print " $shortCommentUrl " if defined($shortCommentUrl);
  #print " — $desc" if defined ($desc);
  print "\n";
}

sub doQthCom {
  my $url = shift;
  my ($title, $desc, $call);

  # Temporary proxy - TODO: permanent URL?
  $url =~ s|https?://swap\.qth\.com/view_ad\.php\?counter=|https://app-oa25k.lamp.app/phpproxy/qth-proxy.php?id=|i;

  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    if (m|<font size=3 face="Arial,Helvetica">\s*(.*?)\s*</font></B>|) {
      $title = $1;
    }
    if (not defined($desc) and
	m|<DT><font size=2 face="Arial,Helvetica">\s*(.*)</font>|) {
      $desc = $1;
      $desc =~ s/<BR>/ /ig;
    }
    if (not defined($call) and m|<DT><font size=2 face="Arial,Helvetica">Listing #\d+ by <a href="https://www\.qth\.com/callsign\.php\?cs=[^"]+">([^<]+)</a>|) {
      $call = $1;
    }
  }
  close(HTTP);

  if (defined($desc) and length($desc) > 300) {
    $desc = substr($desc, 0, 300) . "…";
  }
  $title =~ tr/\n\r/  /;
  $desc =~ tr/\n\r/  /;
  $title = decodeEntities($title);
  $desc = decodeEntities($desc);
  $title =~ s/^\s*(.*?)\s*$/$1/;
  $desc =~ s/^\s*(.*?)\s*$/$1/;

  print bold("\"$title\"") if defined($title);
  print " by $call" if defined($call);
  print " — $desc" if defined($desc);
  print "\n";
}

sub doQrzDb {
  my $url = shift;
  my $call;
  if ($url =~ m|https?://(www\.)?qrz\.com/(db\|lookup)/([A-Z0-9/]+)|i) {
    $call = $3;
  }
  my $libdir = dirname(realpath(__FILE__));
  if (not defined($call) or not -e "$libdir/qrz") {
    doHtml($url);	# fallback
  }

  exec "$libdir/qrz", "--compact", "$call" or die "error execing qrz for $call";
}

sub doQth {
  my ($lat, $lon) = $@;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/grid") {
    exec "$libdir/grid", "$2,$3" or die "error execing grid for $2,$3";
  }
}

sub doAmazon {
  my $url = shift;
  my $shortUrl = shortenUrl($url);
  my $useragent = "Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0";
  #my $useragent = "foo";
  my ($price, $curr, $stars, $prime, $vendor, $fulfilled, $title);
  open(HTTP, '-|', "curl -A \"$useragent\" --compressed --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    #print;
    #$pricespan = 1 if /span id="price_inside_buybox"/;
    #if ($pricespan == 1 and /\$([0-9.]+)\s*$/) {
    #}
    if (/Sorry, we just need to make sure you're not a robot./) {
      print "Captcha encountered; $shortUrl\n";
      return;
    }
    if (/discuss automated access/) {
      print "Amazon anti-scraper filter encountered; $shortUrl\n";
      return;
    }
    if (/Something Went Wrong/i) {
      print "Something went wrong; $shortUrl\n";
      return;
    }

    if (/<title>(Amazon.com\s*:|Amazon\s*\|)?\s*([^<]*?)(-?\s*Amazon.com|-?\s*Amazon Canada)?<\/title>/) {
      $title = decodeEntities($2);
      $title =~ s/Amazon.co.uk:\s*//;
    }
    if (/<span id="priceblock_(ourprice|pospromoprice)"[^>]+>([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $2;
      $curr =~ tr/￥/¥/;
      $price = $3;
    }
    if (/<span id="priceblock_ourprice"[^>]+>([\$￥£]|CDN\$)\s*([0-9.,]+) - ([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = "$2 to $1$4";
    }
    if (not defined $price and /span class=.*offer-price.*">([\$￥£]|CDN\$)\s*([0-9.,]+)</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (not defined $price and /\d New.*span class=.*a-color-price.*>\s*([\$￥£]|CDN\$)\s*([0-9.,]+)\s*</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (not defined $price and not /Used/ and /span class=.*a-color-price.*>\s*([\$￥£]|CDN\$)\s*([0-9.,]+)\s*</) {
      $curr = $1;
      $curr =~ tr/￥/¥/;
      $price = $2;
    }
    if (/"([0-9.]+) out of 5 stars"/ and not defined $stars) {
      $stars = $1;
    }
    if (/"5つ星のうち ([0-9.]+)"/ and not defined $stars) {
      $stars = $1;
    }
    $prime = 1 if /a-icon-prime.*aria-label="Free Shipping for Prime Members"/;
    if (/(Sold by |この商品は、)<[^>]+>([^<]+)</) {
      $vendor = $2;
    }
    if (/Ships from and sold by <[^>]+>([^<]+)</) {
      $vendor = $1;
      $fulfilled = 0;
    }
    $fulfilled = 1 if /isAmazonFulfilled=1/;
    $fulfilled = 1 if /Fulfilled by Amazon/;
    #($vendor, $fulfilled) = ("Amazon", 1) if /(Ships|Dispatched) from and sold by Amazon/;
    ($vendor, $fulfilled) = ("Amazon", 1) if /data-feature-name="shipsFromSoldByInsideBuyBox"/;
  }
  close(HTTP);

  $prime = 0 if !defined $prime;
  $fulfilled = 0 if !defined $fulfilled;
  my $shortUrl = shortenUrl($url);

#  print "title: $title\n";
#  print "price: $price\n";
#  print "stars: $stars", yellow("★"), "\n";
#  print "prime: $prime ", $prime == 1 ? darkYellow("✔").cyan("prime") : "", "\n";
#  print "vendor: $vendor\n";
#  print "fulfilled $fulfilled\n";

  print bold($title), " -- $curr$price; $stars" . yellow("★"),
	$prime == 1 ? darkYellow(" ✔").cyan("prime") : "",
	defined($vendor) ? " sold by $vendor" : "",
	$fulfilled == 1 ? " fulfilled by Amazon " : " ",
	$shortUrl, "\n" if defined $title;

}

sub doXkcd {
  my $num = shift;
  my $url = "https://xkcd.com/$num/info.0.json";
  my %data;

  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    my $lines = $_;
    $lines =~ s/("|\d), "/\1,\n"/g;
    my @vals = split("\n", $lines);
    foreach my $e (@vals) {
      if ($e =~ /"(\w+)": (\d+|"[^"]+"),/) {
	my ($k, $v) = ($1, $2);
	$v =~ s/^"//; $v =~ s/"$//;
	$v =~ s/\\u([0-9a-f]{2,4})/chr(hex($1))/ige;
	#print "$k==>$v\n";
	$data{$k} = $v;
      }
    }
  }

  return if not defined($data{title});

  $data{transcript} =~ s/\\n/ /g;
  $data{alt} =~ s/\\n/ /g;

  if (defined($data{transcript}) and length($data{transcript}) > 200) {
    $data{transcript} = substr($data{transcript}, 0, 200) . "…";
  }

  if (defined($data{alt}) and length($data{alt}) > 80) {
    $data{alt} = substr($data{alt}, 0, 80) . "…";
  }

  $data{month} = "0$data{month}" if $data{month} < 10;

  my $shortimg = shortenUrl($data{img});
  $shortimg = $data{img} if not defined($shortimg);

  print italic("xkcd"), " #$data{num}: ", bold($data{safe_title}),
    " ($data{year}/$data{month}) img: ${shortimg}";
  print " -- $data{transcript}"
    if defined $data{transcript} and length($data{transcript}) > 0;
  print " -- alt: $data{alt}"
    if defined $data{alt} and length($data{alt}) > 0;
  print "\n";
}

sub doImgur {
  my $url = shift;
  return if not defined $imgur_key;

  my $isgal = 0;
  my $isalb = 0;
  my $isimg = 0;

  my $hash = undef;
  if ($url =~ m!/gallery/([0-9A-Za-z_]+)/?$!) {
    $hash = $1;
    $isgal = 1;
  }
  if ($url =~ m!/a/([0-9A-Za-z_]+)/?$!) {
    $hash = $1;
    $isalb = 1;
  }
  if ($url =~ m!imgur.com/+([0-9A-Za-z_]+)(\.(png|gifv?|jpe?g|mp4))?$!i) {
    $hash = $1;
    $isimg = 1;
  }
  if ($url =~ m!imgur.com/r/\w+/([0-9A-Za-z_]+)/?$!) {
    $hash = $1;
    $isimg = 1;
  }
  if ($url =~ m!imgur.com/t/\w+/([0-9A-Za-z_]+)/?$!) {
    $hash = $1;
    $isgal = 1;
  }

  my $apiurl = undef;
  $apiurl = "https://api.imgur.com/3/image/$hash" if $isimg == 1;
  $apiurl = "https://api.imgur.com/3/album/$hash" if $isalb == 1;
  $apiurl = "https://api.imgur.com/3/gallery/$hash" if $isgal == 1;

  print "unrecognized url: $url\n" if not defined $apiurl;
  return if not defined $apiurl;

  my %data;
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$apiurl' --request GET --header 'Authorization: Client-ID $imgur_key'");
  binmode(HTTP, ":utf8");
  while(<HTTP>) {
    #print;
    my $lines = $_;
    $lines =~ s/(null|true|false|"|\d),\s*"/\1,\n"/g;
    my @vals = split("\n", $lines);
    foreach my $e (@vals) {
      #print "$e\n";
      if ($e =~ /"(\w+)":\s*(\d+|"[^"]+"|true|false|null),/) {
	my ($k, $v) = ($1, $2);
	$v =~ s/^"//; $v =~ s/"$//;
	if (not defined $data{$k}) {
	  #print "$k==>$v\n";
	  $data{$k} = $v;
	  $data{$k} = undef if $v eq "null";
	}
      }
    }
  }
  close(HTTP);

  return if not defined $data{success} or $data{success} eq "false";

  my $title = $data{title};
  $title = unescape($title) if defined $title;
  $title = "Untitled" if not defined $title;
  my $desc = $data{description};
  if (defined $desc) {
    $desc = unescape($desc);
    if (length $desc > 100) {
      $desc = substr($desc, 0, 100) . "…";
    }
  }

  use integer;
  #print "$url";
  print bold(" \"$title\"") if defined $title;
  print " by \@$data{account_url}" if defined $data{account_url};
#  print " on ", scalar(gmtime($data{datetime})), " UTC;"
#    if defined $data{datetime};
  print " $data{views} views" if defined $data{views};
  print green(" $data{ups}↑") if defined $data{ups};
  print red(" $data{downs}↓") if defined $data{downs};
  print " /r/$data{section}" if defined $data{section};
  print " [$data{images_count} images]"
    if defined $data{images_count} and $data{images_count} > 1;
  print " [animated]" if defined $data{animated} and $data{animated} eq "true";
  print " [$data{width}x$data{height}]"
    if defined $data{width} and $data{width} > 0;
  print " (" . $data{size} / 1024 . "kB)"
    if defined $data{size} and $data{size} > 0;
  print yellow(" [sound]")
    if defined $data{has_sound} and $data{has_sound} eq "true";
  print red(" [NSFW]") if defined $data{nsfw} and $data{nsfw} eq "true";
  print " preview: http://i.imgur.com/${hash}l.jpg" if $isimg == 1 and
	($data{width} > 640 or $data{height} > 640);
  print ": $desc" if defined $desc;
  print "\n";
}

sub doFccApp {
  my $url = shift;
  my ($appId, $call, $status, $receipt, $action, $systematic, $relative, $req);
  my $purpose;
  if ($url =~ m|https?://wireless2.fcc.gov/UlsApp/ApplicationSearch/.*\?applID=(\d+)|) {
    $appId = $1;
  }
  $url = "http://wireless2.fcc.gov/UlsApp/ApplicationSearch/applMain.jsp?applID=$appId";
  #print "$url\n";
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  my $inStatus = 0;
  my $inReceipt = 0;
  my $inAction = 0;
  while(<HTTP>) {
    #print;
    if (m|title="Link to License in new window" target="_new">([^<]+)</a>|) {
      $call = $1;
      #print "call $call\n"
    }
    $purpose = "Administrative Update" if /Administrative Update/;
    $purpose = "Renewal" if /Renewal Only/;
    $purpose = "New License" if /NE - New/;
    $inStatus = 1 if />Application Status</;
    if ($inStatus and /-\s*(\w+)\s*$/) {
      $status = $1;
      #print "status: $status\n";
      $inStatus = 0;
    }
    $inReceipt = 1 if />Receipt Date</;
    if ($inReceipt and m|\s*([01][0-9]/[0-3][0-9]/\d{4})(&nbsp;)?<|) {
      $receipt = $1;
      #print "receipt: $receipt\n";
      $inReceipt = 0;
    }
    $inAction = 1 if />Action Date</;
    if ($inAction and m|\s*([01][0-9]/[0-3][0-9]/\d{4})(&nbsp;)?<|) {
      $action = $1;
      #print "action: $action\n";
      $inAction = 0;
    }
  }
  close(HTTP);

  $url = "http://wireless2.fcc.gov/UlsApp/ApplicationSearch/applServiceSpecific.jsp?applID=$appId";
  open(HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  my $inSystematic = 0;
  my $inPreflist = 0;
  my $inReq = 0;
  my @vanities;
  while(<HTTP>) {
    $inSystematic = 1 if />Request to change a station call sign systematically\?</;
    if ($inSystematic and /\s*(.*)&nbsp;</) {
      $systematic = $1;
      #print "systematic: $systematic\n";
      $systematic = undef if $systematic eq "";
      $inSystematic = 0;
    }
    if (/Close Relative of Former Holder - (.+?)\s*$/) {
      $relative = $1;
    }
    $inReq = 1 if />Requested Call Sign</;
    if ($inReq and /^\s*([A-Z0-9]+)\s*&nbsp;</) {
      $req = $1;
      $inReq = 0;
    }
    $inPreflist = 1 if /Reference Copy Displays Call Sign Preference Information Out Of Order/;
    if ($inPreflist and /(&nbsp;)*(\d+)\.(&nbsp;)*([A-Z0-9]+)\s*</) {
      my ($n, $c) = ($2, $4);
      #print "$n: $c\n";
      $vanities[$n-1] = $c;
    }
  }
  close(HTTP);

  if (defined $call) {
    print bold($call), ": ";
    $status = lightblue($status) if $status eq "Pending";
    $status = green($status) if $status eq "Granted";
    $status = red($status) if $status eq "Dismissed";
    $status = yellow($status) if $status eq "Inactive";
    print "$status -- ";
    print "$purpose; " if defined $purpose;
    print "systematic; " if defined $systematic and $systematic ne "N";
    print "received $receipt, last action $action; " if defined $receipt;
    print "vanity list: ", join(", ", @vanities) if defined $vanities[0];
    print "relative: $relative " if defined $relative;
    print "requested: $req" if defined $req;
    print "\n";
  }
}

sub doAe7qRegion {
  my $area = shift;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/ae7q") {
    exec "$libdir/ae7q", "$area" or die "error execing ae7q for '$area'";
  }
}

sub doAe7qCall {
  my $call = shift;
  my $libdir = dirname(realpath(__FILE__));
  if (-e "$libdir/ae7q") {
    exec "$libdir/ae7q", "$call" or die "error execing ae7q for '$call'";
  }
}

sub unescape {
  my $s = shift;
  $s =~ s/\\n/ /g;
  $s =~ s/\\"/"/g;
  $s =~ s|\\/|/|g;
  $s =~ s|\\u([0-9a-f]{4})|chr hex $1|eg;
  return $s;
}

sub uniq {
  my %seen;
  grep !$seen{$_}++, @_;
}

sub deamp {
  my $url = shift;
  my $deamped;
  open (HTTP, '-|', "curl --max-time $timeout -L -k -s '$url'");
  while (<HTTP>) {
    if (m|<link\s+rel="?canonical"?\s+href="?(.*?)"?\s*/>|i) {
      $deamped = $1;
    }
  }
  close(HTTP);
  return $deamped;
}
